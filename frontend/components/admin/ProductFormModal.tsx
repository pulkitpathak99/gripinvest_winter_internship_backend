// frontend/components/admin/ProductFormModal.tsx
"use client";

import { useState, useEffect } from 'react';
import api from '@/lib/api';
import { Sparkles } from 'lucide-react'; 
import { toast } from 'react-toastify';

// Define the shape of the product data
interface Product {
  id?: string;
  name: string;
  investmentType: 'bond' | 'etf' | 'fd' | 'mf' | 'other';
  annualYield: number;
  riskLevel: 'low' | 'moderate' | 'high';
  tenureMonths: number;
  minInvestment: number;
  description: string;
}

interface ProductFormModalProps {
  // Pass initialData when editing, null when creating
  initialData: Product | null;
  onClose: () => void;
  onSuccess: () => void; // To refresh the product list
}

export default function ProductFormModal({ initialData, onClose, onSuccess }: ProductFormModalProps) {
  const [formData, setFormData] = useState({
    name: '',
    investmentType: 'bond',
    annualYield: 8.5,
    riskLevel: 'low',
    tenureMonths: 12,
    minInvestment: 1000,
    description: '',
  });
  const [isGenerating, setIsGenerating] = useState(false);

  const [loading, setLoading] = useState(false);
  const isEditMode = !!initialData;

  useEffect(() => {
    // If we're in edit mode, populate the form with existing data
    if (isEditMode) {
      setFormData({
        name: initialData.name,
        investmentType: initialData.investmentType,
        annualYield: Number(initialData.annualYield),
        riskLevel: initialData.riskLevel,
        tenureMonths: Number(initialData.tenureMonths),
        minInvestment: Number(initialData.minInvestment),
        description: initialData.description || '',
      });
    }
  }, [initialData, isEditMode]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const isNumber = ['annualYield', 'tenureMonths', 'minInvestment'].includes(name);
    setFormData(prev => ({ ...prev, [name]: isNumber ? parseFloat(value) : value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isEditMode) {
        // Update existing product
        await api.put(`/products/${initialData.id}`, formData);
        toast.success("Product updated successfully!");
      } else {
        // Create new product
        await api.post('/products', formData);
        toast.success("Product created successfully!");
      }
      onSuccess(); // Refresh the product list on the main page
    } catch (error) {
      toast.error("An error occurred. Please check the details and try again.");
      console.error("Failed to save product:", error);
    } finally {
      setLoading(false);
    }
  };
  const handleGenerateDescription = async () => {
    if (!formData.name || !formData.annualYield) {
      toast.warn("Please enter a Name and Annual Yield first.");
      return;
    }
    setIsGenerating(true);
    try {
      const response = await api.post('/products/generate-description', {
        name: formData.name,
        investmentType: formData.investmentType,
        annualYield: formData.annualYield,
        riskLevel: formData.riskLevel,
        tenureMonths: formData.tenureMonths,
      });
      // Update the description field with the AI's response
      setFormData(prev => ({ ...prev, description: response.data.description }));
      toast.success("Description generated by AI!");
    } catch (error) {
      toast.error("Failed to generate description.");
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 backdrop-blur-sm">
      <div className="bg-slate-900 border border-slate-800 p-8 rounded-xl shadow-xl w-full max-w-2xl text-white">
        <h2 className="text-2xl font-bold mb-6">{isEditMode ? 'Edit Product' : 'Create New Product'}</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-400">Product Name</label>
              <input type="text" name="name" value={formData.name} onChange={handleChange} required className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg"/>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400">Investment Type</label>
              <select name="investmentType" value={formData.investmentType} onChange={handleChange} className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg">
                <option value="bond">Bond</option>
                <option value="etf">ETF</option>
                <option value="fd">Fixed Deposit</option>
                <option value="mf">Mutual Fund</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-400">Annual Yield (%)</label>
              <input type="number" name="annualYield" value={formData.annualYield} onChange={handleChange} required step="0.01" className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg"/>
            </div>
             <div>
              <label className="block text-sm font-medium text-gray-400">Tenure (Months)</label>
              <input type="number" name="tenureMonths" value={formData.tenureMonths} onChange={handleChange} required className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg"/>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400">Risk Level</label>
              <select name="riskLevel" value={formData.riskLevel} onChange={handleChange} className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg">
                <option value="low">Low</option>
                <option value="moderate">Moderate</option>
                <option value="high">High</option>
              </select>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400">Minimum Investment ($)</label>
            <input type="number" name="minInvestment" value={formData.minInvestment} onChange={handleChange} required step="100" className="mt-1 w-full p-2 bg-slate-800 border border-slate-700 rounded-lg"/>
          </div>
          <div>
          <div className="flex justify-between items-center mb-1">
            <label className="block text-sm font-medium text-gray-400">Description</label>
            <button
              type="button"
              onClick={handleGenerateDescription}
              disabled={isGenerating}
              className="flex items-center gap-2 px-3 py-1 text-xs bg-yellow-500/10 text-yellow-300 rounded-md border border-yellow-500/20 hover:bg-yellow-500/20 disabled:opacity-50"
            >
              <Sparkles size={14} />
              {isGenerating ? 'Generating...' : 'Generate with AI'}
            </button>
          </div>
          <textarea name="description" value={formData.description} onChange={handleChange} rows={4} required className="w-full p-2 bg-slate-800 border border-slate-700 rounded-lg"></textarea>
        </div>
          <div className="pt-4 flex justify-end gap-4">
            <button type="button" onClick={onClose} className="px-6 py-2 bg-slate-700 text-gray-300 rounded-lg hover:bg-slate-600">Cancel</button>
            <button type="submit" disabled={loading} className="px-6 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 disabled:bg-slate-700">
              {loading ? 'Saving...' : 'Save Product'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}